package burp;


import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.io.PrintWriter;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import java.awt.*;
import java.awt.event.ItemListener;
import javax.swing.JMenuItem;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JTextArea;


public class BurpExtender extends AbstractTableModel implements IBurpExtender, ITab, IHttpListener,IScannerCheck, IMessageEditorController,IContextMenuFactory
{
    private IBurpExtenderCallbacks callbacks;
    private IExtensionHelpers helpers;
    private JSplitPane splitPane;
    private IMessageEditor requestViewer;
    private IMessageEditor responseViewer;
    private final List
   
     log = new ArrayList
    
     ();//Record the original traffic private final List
     
       log2 = new ArrayList
      
       ();//Record attack traffic private final List
       
         log3 = new ArrayList
        
         ();//Used to display private final List
         
           log4_md5 = new ArrayList
          
           ();//md5 for storing data packets private IHttpRequestResponse currentlyDisplayedItem; public PrintWriter stdout; int switches = 1; //Switch 0 off 1 on int clicks_Repeater=0;//64 is monitoring 0 is off int clicks_Proxy=0; //4 is monitoring 0 is closed int conut = 0; //Number of records String data_md5_id; //Used to judge the currently selected data package public AbstractTableModel model = new MyModel(); int original_data_len;//Record the original data package Length int is_int = 1; //Switch 0 off 1 on;//Whether pure data is -1, -0 String temp_data; //Used to save temporary content int JTextArea_int = 0;//Custom payload switch 0 off 1 on String JTextArea_data_1 = "";//Content of text field int diy_payload_1 = 1;//Custom payload space encoding switch 0 off 1 on int diy_payload_2 = 0;//Custom payload value empty switch 0 off 1 on int select_row = 0;//Number of rows in the selected table Table logTable; //The first table frame// // implement IBurpExtender // @Override public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks) { //Output this.stdout = new PrintWriter(callbacks. getStdout(), true); this.stdout.println("hello xia sql!"); this.stdout.println("Hello welcome!"); this.stdout.println("version:2.3"); // keep a reference to our callbacks object this .callbacks = callbacks; // obtain an extension helpers object helpers = callbacks.getHelpers(); // set our extension name callbacks.setExtensionName("xia SQL V2.3"); // create our UI SwingUtilities.invokeLater(new Runnable () { @Override public void run() { // main split pane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT); JSplitPane splitPanes = new JSplitPane(JSplitPane.VERTICAL_SPLIT); JSplitPane splitPanes_2 = new JSplitPane(JSplitPane.VERTICAL_SPLIT); // table of log entries logTable = new Table(BurpExtender.this); JScrollPane scrollPane = new JScrollPane(logTable); //Add a scroll bar to the list//test JPanel jp=new JPanel(); JLabel jl=new JLabel("== >");//Create a label Table_log2 table=new Table_log2(model); JScrollPane pane=new JScrollPane(table);//Add a scroll bar to the list jp.add(scrollPane); //Add the table to the panel jp.add(jl) ; //Add label to panel jp.add(pane); //Add table to panel //side checkbox JPanel jps=new JPanel(); jps.setLayout(new GridLayout(14, 1)); //Six rows and one column JLabel jls=new JLabel("Plugin Name: Blind Note"); //Create a label JLabel jls_1=new JLabel("blog:www.nmd5.com"); //Create a label JLabel jls_2= new JLabel("Version: xia SQL V2.3"); //Create a label JLabel jls_3=new JLabel("Thanks list: Moonlit, A Cat A Dog, Shincehor"); //Create a label JCheckBox chkbox1=new JCheckBox("Start Plugin", true); //Create a checkbox with specified text and status JCheckBox chkbox2=new JCheckBox("Monitor Repeater"); //Create a checkbox with specified text JCheckBox chkbox3=new JCheckBox("Monitor Proxy"); //Create a checkbox with the specified text JCheckBox chkbox4=new JCheckBox("If the value is a number, perform -1, -0", true); //Create a checkbox with the specified text jls_4=new JLabel("After modifying the payload Remember to click Load");//Create a label JCheckBox chkbox5=new JCheckBox("custom payload"); //Create a checkbox with the specified text JCheckBox chkbox6=new JCheckBox("Custom payload url encoding",true); //Create the specified text Text checkbox JCheckBox chkbox7=new JCheckBox("The parameter value in the custom payload is empty"); //Create a checkbox with the specified text//chkbox4.setEnabled(false);//Set it to not selectable JButton btn1 =new JButton("Clear list"); //Create JButton object JButton btn2=new JButton("Load/reload payload"); //Create JButton object //Custom payload area JPanel jps_2=new JPanel(); JTextArea jta=new JTextArea(" and 1=1\n and 1=2",18,16); //jta.setLineWrap(true); //Set the text in the text area to wrap automatically jta.setForeground(Color.BLACK ); //Set the background color of the component jta.setFont(new Font("Kaiti",Font.BOLD,16)); //Modify the font style jta.setBackground(Color.LIGHT_GRAY); //Set the background color jta.setEditable (false);//Uneditable state JScrollPane jsp=new JScrollPane(jta); //Put the text field into the scrolling window jps_2.add(jsp); //Add JScrollPane to the JPanel container//Add checkbox listener Event chkbox1.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { if(chkbox1.isSelected()){ stdout.println("plugin xia SQl started"); switches = 1; }else { stdout.println(" Plugin xia SQL off"); switches = 0; } } }); chkbox2.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { if (chkbox2.isSelected()){ stdout.println("Start Monitor Repeater"); clicks_Repeater = 64; }else { stdout.println("Close monitor Repeater"); clicks_Repeater = 0; } } }); chkbox3.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { if(chkbox3.isSelected()) { stdout.println("Start monitoring Proxy"); clicks_Proxy = 4; }else { stdout.println("Close monitoring Proxy"); clicks_Proxy = 0; } } }); chkbox4.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { if(chkbox4.isSelected()) { stdout.println("If the activation value is a number, go to -1, -0"); is_int = 1; } else { stdout.println("-1, -0 if the closing value is a number"); is_int = 0; } } }); chkbox5.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { if (chkbox5.isSelected()) { stdout.println("Start custom payload"); jta.setEditable(true); jta.setBackground(Color.WHITE); //Set background color JTextArea_int = 1; if (diy_payload_1 == 1){ String temp_data = jta.getText(); temp_data = temp_data.replaceAll(" ","%20"); JTextArea_data_1 = temp_data; }else { JTextArea_data_1 = jta.getText(); } }else { stdout.println( "Close custom payload"); jta.setEditable(false); jta.setBackground(Color.LIGHT_GRAY); //Set background color JTextArea_int = 0; } } }); chkbox6.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { if(chkbox6.isSelected()) { stdout.println("Start space url encoding"); diy_payload_1 = 1; // space url encoding String temp_data = jta.getText(); temp_data = temp_data.replaceAll(" ","%20"); JTextArea_data_1 = temp_data; }else { stdout.println("Turn off space url encoding"); diy_payload_1 = 0; JTextArea_data_1 = jta.getText( ); } } }); chkbox7.addItemListener(new ItemListener() { @Override public void itemStateChanged(ItemEvent e) { if(chkbox7.isSelected()) { stdout.println("Start custom payload parameter value empty") ; diy_payload_2 = 1; }else { stdout.println("Close the custom payload parameter value empty"); diy_payload_2 = 0; } } }); btn1.addActionListener(new ActionListener() {//Clear the list @Override public void actionPerformed(ActionEvent e) { log.clear();//Clear the log content log2.clear();//Clear the contents of log2 log3.clear();//Clear the contents of log3 log4_md5.clear();//Clear the contents of log4 conut = 0; fireTableRowsInserted(log.size(), log.size());/ /Refresh the display in the list model.fireTableRowsInserted(log3.size(), log3.size());//Refresh the display in the list} }); btn2.addActionListener(new ActionListener() {//Load custom payload @ Override public void actionPerformed(ActionEvent e) { if (diy_payload_1 == 1){ String temp_data = jta.getText(); temp_data = temp_data.replaceAll(" ","%20"); JTextArea_data_1 = temp_data; }else { JTextArea_data_1 = jta.getText(); } } }); jps.add(jls); jps.add(jls_1); jps.add(jls_2); jps.add(jls_3); jps.add(chkbox1); jps.add( jps.add(chkbox3); jps.add(chkbox4); jps.add(btn1); jps.add(jls_4); jps.add(chkbox5); jps.add(chkbox6); jps.add(chkbox7 ); jps.add(btn2); // tabs with request/response viewers JTabbedPane tabs = new JTabbedPane(); requestViewer = callbacks.createMessageEditor(BurpExtender.this, false); responseViewer = callbacks.createMessageEditor(BurpExtender.this, false); tabs.addTab("Request", requestViewer.getComponent()); tabs.addTab("Response", responseViewer.getComponent() ); //jp.add(tabs); //right splitPanes_2.setLeftComponent(jps);//above splitPanes_2.setRightComponent(jps_2);//below//left splitPanes.setLeftComponent(jp);//above splitPanes.setRightComponent (tabs);//below//overall distribution splitPane.setLeftComponent(splitPanes);//Add on the left splitPane.setRightComponent(splitPanes_2);//Add on the right splitPane.setDividerLocation(1000);//Set the size of the split// customize our UI components callbacks.customizeUiComponent(splitPane); callbacks.customizeUiComponent(logTable); callbacks.customizeUiComponent(scrollPane); callbacks.customizeUiComponent(pane); callbacks.customizeUiComponent(jps); callbacks.customizeUiComponent(jp);callbacks.customizeUiComponent(tabs); // add the custom tab to Burp's UI callbacks.addSuiteTab(BurpExtender.this); // register ourselves as an HTTP listener callbacks.registerHttpListener(BurpExtender.this); callbacks.registerScannerCheck(BurpExtender.this) ; callbacks.registerContextMenuFactory(BurpExtender.this); } }); } // // implement ITab // @Override public String getTabCaption() { return "xia SQL"; } @Override public Component getUiComponent() { return splitPane; } // // implement IHttpListener // @Override public void processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo) { if(switchs == 1){//plugin switch if(toolFlag == clicks_Repeater || toolFlag == clicks_Proxy){ //Listen to Repeater // only process responses if (!messageIsRequest) { // create a new log entry with the message details synchronized(log) { //BurpExtender.this.checkVul(messageInfo,toolFlag); Thread thread = new Thread(new Runnable() { public void run() { try { BurpExtender.this.checkVul(messageInfo,toolFlag); } catch (Exception ex) { ex.printStackTrace(); BurpExtender.this.stdout.println(ex); } } }); thread.start(); } } } } } @Override public List
           
             doPassiveScan(IHttpRequestResponse baseRequestResponse) { return null; } @Override public List
            
              createMenuItems(final IContextMenuInvocation invocation) { //Right button send button function List
             
               listMenuItems = new ArrayList
              
               (1); if(invocation.getToolFlag() == IBurpExtenderCallbacks.TOOL_REPEATER || invocation.getToolFlag() == IBurpExtenderCallbacks.TOOL_PROXY){ //Parent menu IHttpRequestResponse[] responses = invocation.getSelectedMessages(); JMenuItem jMenu = new JMenuItem("Send to xia SQL"); jMenu.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { if(switchs == 1) { // HTTP requests should not be made in the Swing event dispatch thread , so you need to create a Runnable and complete the work in the run() method, then call new Thread(runnable).start() to start the thread Thread thread = new Thread(new Runnable() { public void run() { try { BurpExtender .this.checkVul(responses[0], 1024); } catch (Exception ex) { ex.printStackTrace(); BurpExtender.this.stdout.println(ex); } } }); thread.start(); }else { BurpExtender.this.stdout.println("The plug-in xia SQL is closed!"); } } }); listMenuItems.add(jMenu);} //BurpExtender.this.checkVul(responses,4); return listMenuItems; } private void checkVul(IHttpRequestResponse baseRequestResponse, int toolFlag){ int is_add; //Used to determine whether to add scan String change_sign_1 = ""; //Use To display the content of the state change part of the first list box//Encrypt the current url and parameters with md5 to determine whether the url has been scanned for List
               
                +temp_data+"\n"); return; } } } //stdout.println(temp_data); String request_data = null; String[] request_datas; is_add = 0; for (IParameter para : paraLists){// Loop to get parameters, Determine the type, construct new parameters, and merge them into the new request package. if (para.getType() == 0 || para.getType() == 1 || para.getType() == 6) { //getTpe() is to determine if the parameter is at that position if(is_add = = 0){ is_add = 1; } temp_data += "+"+para.getName(); //Determine whether it is json nesting considering performance consumption, and judging json nesting and json with a list, use regular processing if( para.getType() == 6 && request_data == null){ try { //stdout.println(helpers.bytesToString(baseRequestResponse.getRequest()));//View the packet content request_data = helpers.bytesToString(baseRequestResponse.getRequest ()).split("\r\n\r\n")[1]; //stdout.println(request_data); //json nested request_datas = request_data.split("\\{\""); if(request_datas.length > 2){ is_add = 2;
                
                 paraList= helpers.analyzeRequest(baseRequestResponse).getParameters(); byte[] new_Request = baseRequestResponse.getRequest(); int json_count = -1;//Record the number of json nesting for (IParameter para : paraList){// Loop to get parameters if(para.getType() == 6){ json_count += 1;//Record the number of json nesting} //payload ArrayList
                 
                   payloads = new ArrayList<>(); payloads.add("'"); payloads.add("''"); if (para.getType() == 0 || para.getType() == 1 || para.getType() == 6){ //getTpe() is to determine if the parameter is String key = para.getName();//Get the name of the parameter String value = para.getValue();// Get the value of the parameter stdout.println(key+":"+value);//Output the original key-value data if(is_int == 1){//The switch is used to judge whether to enable -1, -0 operation if (value.matches("[0-9]+")) {//Whether the value of the parameter is a pure number payloads.add("-1"); payloads.add("-0"); } } //Custom payload if(JTextArea_int == 1){ String[] JTextArea_data = JTextArea_data_1.split("\n"); for(String a:JTextArea_data){ //stdout.println(a); //stdout.println ("------"); payloads.add(a); } } int change = 0; //Used to judge whether the length of the returned packet is consistent and save the length of the first request response for (String payload : payloads ) { int time_1 = 0,time_2 = 0;if(JTextArea_int == 1){ //custom payload //parameter value is empty if(diy_payload_2 == 1){ if(payload != "'" && payload !="''" && payload != "-1 " && payload != "-0"){ value = ""; } } } stdout.println(key+":"+value+payload);//Output the key and value of the added payload IHttpService iHttpService = baseRequestResponse.getHttpService() ; //New request packet IHttpRequestResponse requestResponse = null; //Variables used in if(para.getType() == 6){ List//The new request packet IHttpRequestResponse requestResponse = null; //The variable used in if(para.getType() == 6){ List//The new request packet IHttpRequestResponse requestResponse = null; //The variable used in if(para.getType() == 6){ List
                  
                    headers = helpers.analyzeRequest(baseRequestResponse).getHeaders(); if(is_add ==1) { //json format String newBody = "{"; //json body content for (IParameter paras : paraList) {//loop all Parameters, used to customize the json format body to prepare if (paras.getType() == 6) {//As long as the data in json format if (key == paras.getName() && value == paras.getValue()) { //Determine whether the current key and value are the keys and values ​​that need to add payload newBody += "\"" + paras.getName() + "\":" + "\"" + paras.getValue() + payload + "\",";//Construct json body } else { newBody += "\"" + paras.getName() + "\":" + "\"" + paras.getValue() + "\", ";//Construct json body } } } newBody = newBody.substring(0, newBody.length() - 1); //Remove the last one, newBody += "}";//json body content byte[] bodyByte = newBody.getBytes(); byte[] new_Requests = helpers.buildHttpMessage(headers, bodyByte); //Key method time_1 = (int) System.currentTimeMillis(); requestResponse = callbacks.makeHttpRequest(iHttpService, new_Requests);//Send request time_2 = (int) System.currentTimeMillis(); }else if (is_add ==2){ //json nested String[] request_data_temp = request_data.split(",");//used to temporarily save the cut post body content String request_data_body = "";String request_data_body_temp = ""; //The modified body and the string that needs to be temporarily edited for(int i=0;i < request_data_temp.length;i++){ if(i==json_count){//Judge the modified parameter request_data_body_temp = request_data_temp[i] ; stdout.println(request_data_body_temp); //Empty list such as: "classLevels":[], skip processing if(request_data_body_temp.contains(":[]")) {//Determine whether it is an empty list json_count += 1; request_data_body += request_data_temp[i]+","; i += 1; request_data_body_temp = request_data_temp[i]; } if(request_data_body_temp.contains("\":")){ //Determine whether there is ": in the string, if so, it is the normal json content Pattern p = Pattern.compile(".*:\\s?\\[?\\s ?(.*?$)"); Matcher m = p.matcher(request_data_body_temp); if(m.find()){ request_data_body_temp = m.group(1);//Get: the following content} if(request_data_body_temp. contains("\"")){//Determine whether the content is a string request_data_body_temp = request_data_temp[i]; //Modify the content and add payload request_data_body_temp = request_data_body_temp.replaceAll("^(.*:.*?\")( .*?)(\"[^\"]*)$","$1$2"+payload+"$3"); request_data_body+= request_data_body_temp +","; }else { request_data_body_temp = request_data_temp[i]; //Modify the content , add payload request_data_body_temp = request_data_body_temp.replaceAll("^(.*:.*?)(\\d*)([^\"\\d]*)$","$1\"$2"+payload+"\" $3");request_data_body+= request_data_body_temp +","; } }else { //There is no ": in the string, indicating a nested list in json format if(request_data_body_temp.contains("\"")) {//Determine whether the content is a string //Modify the content and add payload request_data_body_temp = request_data_body_temp.replaceAll("^(\")(.*?)(\".*?)$","$1$2"+payload+"$3"); request_data_body+= request_data_body_temp +" ,"; }else { //It is not a string, it is a pure number request_data_body_temp = request_data_body_temp.replaceAll("^(\\d*)(.*?)$","\"$1"+payload+"\"$2" ); request_data_body+= request_data_body_temp +","; } } //stdout.println(request_data_body_temp); }else { request_data_body += request_data_temp[i]+","; } } request_data_body = request_data_body.substring(0, request_data_body.length( ) - 1); //Remove the last one, byte[] bodyByte = request_data_body.getBytes(); byte[] new_Requests = helpers.buildHttpMessage(headers, bodyByte); //Key method time_1 = (int) System.currentTimeMillis(); requestResponse = callbacks.makeHttpRequest(iHttpService, new_Requests);//Send request time_2 = (int) System.currentTimeMillis(); } }else { //Not in json format IParameter newPara = helpers.buildParameter(key,value + payload, para.getType()); //Construct a new parameter byte[] newRequest = helpers .updateParameter(new_Request, newPara);//Update request package parameters time_1 = (int) System.currentTimeMillis(); requestResponse = callbacks.makeHttpRequest(iHttpService, newRequest);//Send request time_2 = (int) System.currentTimeMillis( ); } //Determine whether the data length will change String change_sign;//Change the content in the second table if(payload == "'" || payload == "-1" || change == 0){ change = requestResponse.getResponse().length;//Save the length of the first request response change_sign = ""; }else{ if(payload == "''" || payload == "-0" ){ if(change != requestResponse.getResponse().length){//Determine whether the first length is different from the current one if(payload == "''" && requestResponse .getResponse().length == original_data_len || payload == "-0" && requestResponse.getResponse().length == original_data_len){//Judging that the length of the two single quotes is different from the first one and is the same as the original The length of the package is the same.//The length of the original package is the same as the length of two double quotes and different from the length of a single quote change_sign = "✔ ==> ?"; change_sign_1 = " ✔"; }else{ //The first time Change_sign = "✔"; change_sign_1 = "✔"; } }else { //The length of the first and second packets is the same change_sign = ""; } }else { / /custom payload if(time_2-time_1 >= 3000){ //response time greater than 3 seconds change_sign = "time > 3"; change_sign_1 = "✔"; }else { change_sign = "diy payload"; } } } // Save the response content in log2 log2.add(new LogEntry(conut, toolFlag, callbacks.saveBuffersToTempFiles(requestResponse), helpers.analyzeRequest(requestResponse).getUrl(),key,value+payload,change_sign,temp_data,time_2-time_1,"end")); } } } //Used to update whether all payloads have been run The state of for(int i = 0; i < log.size(); i++){ if(temp_data.equals(log.get(i).data_md5)){ log.get(i).setState("end!" +change_sign_1); //stdout.println("ok"); } } //Refresh the first list box //BurpExtender.this.fireTableRowsInserted(log.size(), log.size()); BurpExtender.this. fireTableDataChanged(); //The first table continues to select the previously selected value BurpExtender.this.logTable.setRowSelectionInterval(BurpExtender.this.select_row-1,BurpExtender.this.select_row-1); } @Override public Listi++){ if(temp_data.equals(log.get(i).data_md5)){ log.get(i).setState("end!"+change_sign_1); //stdout.println("ok"); } } //Refresh the first list box //BurpExtender.this.fireTableRowsInserted(log.size(), log.size()); BurpExtender.this.fireTableDataChanged(); //The first table continues to select the previously selected value BurpExtender .this.logTable.setRowSelectionInterval(BurpExtender.this.select_row-1,BurpExtender.this.select_row-1); } @Override public Listi++){ if(temp_data.equals(log.get(i).data_md5)){ log.get(i).setState("end!"+change_sign_1); //stdout.println("ok"); } } //Refresh the first list box //BurpExtender.this.fireTableRowsInserted(log.size(), log.size()); BurpExtender.this.fireTableDataChanged(); //The first table continues to select the previously selected value BurpExtender .this.logTable.setRowSelectionInterval(BurpExtender.this.select_row-1,BurpExtender.this.select_row-1); } @Override public List
                   
                     doActiveScan(IHttpRequestResponse baseRequestResponse, IScannerInsertionPoint insertionPoint) { return null; } @Override public int consolidateDuplicateIssues(IScanIssue existingIssue, IScanIssue newIssue) { if (existingIssue.getIssueName().equals(newIssue.getIssueName())) return -1; else return 0 ; } // // extend AbstractTableModel // @Override public int getRowCount() { return log.size(); } @Override public int getColumnCount() { return 5; } @Override public String getColumnName(int columnIndex) { switch ( columnIndex) { case 0: return "#"; case 1: return "source"; case 2: return "URL"; case 3: return "return packet length"; case 4: return "status"; default: return "" ; } } @Override public Class
                    getColumnClass(int columnIndex) { return String.class; } @Override public Object getValueAt(int rowIndex, int columnIndex) { LogEntry logEntry = log.get(rowIndex); switch (columnIndex) { case 0: return logEntry.id; case 1 : return callbacks.getToolName(logEntry.tool); case 2: return logEntry.url.toString(); case 3: return logEntry.requestResponse.getResponse().length;//Return the length of the response packet case 4: return logEntry. state; default: return ""; } } //model2 class MyModel extends AbstractTableModel { @Override public int getRowCount() { return log3.size(); } @Override public int getColumnCount() { return 5; } @Override public String getColumnName(int columnIndex) { switch (columnIndex) { case 0: return "parameter"; case 1: return "payload"; case 2: return "return packet length"; case 3: return "change"; case 4: return " time"; default:return ""; } } @Override public Class
                    getColumnClass(int columnIndex) { return String.class; } @Override public Object getValueAt(int rowIndex, int columnIndex) { LogEntry logEntry2 = log3.get(rowIndex); switch (columnIndex) { case 0: return logEntry2.parameter; case 1 : return logEntry2.value; case 2: return logEntry2.requestResponse.getResponse().length;//Return the length of the response packet case 3: return logEntry2.change; case 4: return logEntry2.times; default: return ""; } } } // // implement IMessageEditorController // this allows our request/response viewers to obtain details about the messages being displayed // @Override public byte[] getRequest() { return currentlyDisplayedItem.getRequest(); } @Override public byte[ ] getResponse() { return currentlyDisplayedItem.getResponse(); } @Override public IHttpService getHttpService() { return currentlyDisplayedItem.getHttpService();} // // extend JTable to handle cell selection // private class Table extends JTable { public Table(TableModel tableModel) { super(tableModel); } @Override public void changeSelection(int row, int col, boolean toggle, boolean extend) { // show the log entry for the selected row LogEntry logEntry = log.get(row); data_md5_id = logEntry.data_md5; //stdout.println(log_id);//output the number of currently selected rows select_row = logEntry.id; log3.clear(); for (int i = 0; i < log2.size(); i++) {//Filter out the currently selected original data packets--"Derived packets with payload if(log2. get(i).data_md5==data_md5_id){ log3.add(log2.get(i)); } } //Refresh the list interface model.fireTableRowsInserted(log3.size(), log3.size()); model.fireTableDataChanged (); requestViewer.setMessage(logEntry.requestResponse.getRequest(), true); responseViewer.setMessage(logEntry.requestResponse.getResponse(), false); currentlyDisplayedItem = logEntry.requestResponse;super.changeSelection(row, col, toggle, extend); } } private class Table_log2 extends JTable { public Table_log2(TableModel tableModel) { super(tableModel); } @Override public void changeSelection(int row, int col, boolean toggle, boolean extend) { // show the log entry for the selected row LogEntry logEntry = log3.get(row); requestViewer.setMessage(logEntry.requestResponse.getRequest(), true); responseViewer.setMessage(logEntry.requestResponse.getResponse(), false); currentlyDisplayedItem = logEntry.requestResponse; super.changeSelection(row, col, toggle, extend); } } //Store the md5 value of the packet to match the packet has been requested private static class Request_md5 { final String md5_data ; Request_md5(String md5_data) { this.md5_data = md5_data; } } // // class to hold details of each log entry // private static class LogEntry { final int id; final int tool;final IHttpRequestResponsePersisted requestResponse; final URL url; final String parameter; final String value; final String change; final String data_md5; final int times; String state; LogEntry(int id,int tool, IHttpRequestResponsePersisted requestResponse, URL url,String parameter,String value ,String change,String data_md5,int times,String state) { this.id = id; this.tool = tool; this.requestResponse = requestResponse; this.url = url; this.parameter = parameter; this.value = value; this.change = change; this.data_md5 = data_md5; this.times = times; this.state = state; } public String setState(String state){ this.state = state; return this.state; } } public static String MD5 (String key) { char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' , 'A', 'B', 'C', 'D', 'E', 'F' }; try { byte[] btInput = key.getBytes(); // Get the MessageDigest object of the MD5 digest algorithm MessageDigest mdInst = MessageDigest .getInstance("MD5"); // Update digest with specified bytes mdInst.update(btInput); // Get ciphertext byte[] md = mdInst.digest(); // Convert ciphertext to hexadecimal int j = md.length; char str[] = new char[j * 2]; int k = 0; for (int i = 0; i < j; i++) { byte byte0 = md[i ]; str[k++] = hexDigits[byte0 >>> 4 & 0xf]; str[k++] = hexDigits[byte0 & 0xf]; } return new String(str); } catch (Exception e) { return null; } } }// get ciphertext byte[] md = mdInst.digest(); // convert ciphertext to hexadecimal string form int j = md.length; char str[] = new char[j * 2] ; int k = 0; for (int i = 0; i < j; i++) { byte byte0 = md[i]; str[k++] = hexDigits[byte0 >>> 4 & 0xf]; str[k++] = hexDigits [byte0 & 0xf]; } return new String(str); } catch (Exception e) { return null; } } }// get ciphertext byte[] md = mdInst.digest(); // convert ciphertext to hexadecimal string form int j = md.length; char str[] = new char[j * 2] ; int k = 0; for (int i = 0; i < j; i++) { byte byte0 = md[i]; str[k++] = hexDigits[byte0 >>> 4 & 0xf]; str[k++] = hexDigits [byte0 & 0xf]; } return new String(str); } catch (Exception e) { return null; } } } 
                   
                  
                 
                
               
              
             
            
           
          
         
        
       
      
     
    
   
